#include &lt;LiquidCrystal.h&gt;
#include &lt;Wire.h&gt;
#include &lt;RTClib.h&gt;
#include &lt;EEPROM.h&gt;
int pushVal = 0;                          
int val;
int val2;
int addr = 0;
RTC_DS3231 rtc;
const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;                
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
#define getWellsoon 0                                          
#define HELP_SCREEN 1
#define TIME_SCREEN 2
int pushpressed = 0;
const int ledPin =  LED_BUILTIN;                        
int ledState = LOW;
int Signal = 0;
int buzz = 13;                                      
int push1state, push2state, push3state, stopinState = 0;      
int push1Flag, push2Flag, Push3Flag = false;              
int push1pin = 9;
int push2pin = 8;
int push3pin = 7;
int stopPin = A0;
int screens = 0;              
int maxScreen = 2;            
bool isScreenChanged = true;



long previousMillis = 0;          
long interval = 500;                  
unsigned long currentMillis;
long previousMillisLCD = 0;    
long intervalLCD = 2000;          
unsigned long currentMillisLCD;
int buzz8amHH = 8;  
int buzz8amMM = 00;          //    MM - Minute
int buzz8amSS = 00;          //    SS - Seconds
int buzz2pmHH = 14;          //    HH - hours
int buzz2pmMM = 00;          //    MM - Minute
int buzz2pmSS = 00;          //    SS - Seconds
int buzz8pmHH = 20;          //    HH - hours
int buzz8pmMM = 00;          //    MM - Minute
int buzz8pmSS = 00;          
int nowHr, nowMin, nowSec;                    
void gwsMessege(){              
lcd.clear();
lcd.setCursor(0, 0);
lcd.print(&quot;Stay Healthy :)&quot;);    
lcd.setCursor(0, 1);
lcd.print(&quot;Get Well Soon :)&quot;);    
}
void helpScreen() {              
lcd.clear();
 lcd.setCursor(0, 0);
lcd.print(&quot;Press Buttons&quot;);
lcd.setCursor(0, 1);
lcd.print(&quot;for Reminder...!&quot;);
}void timeScreen() {              
DateTime now = rtc.now();            
lcd.clear();
lcd.setCursor(0, 0);
lcd.print(&quot;Time:&quot;);
lcd.setCursor(6, 0);
lcd.print(nowHr = now.hour(), DEC);



lcd.print(&quot;:&quot;);
lcd.print(nowMin = now.minute(), DEC);
lcd.print(&quot;:&quot;);
lcd.print(nowSec = now.second(), DEC);
lcd.setCursor(0, 1);
lcd.print(&quot;Date: &quot;);
lcd.print(now.day(), DEC);
lcd.print(&quot;/&quot;);
lcd.print(now.month(), DEC);
lcd.print(&quot;/&quot;);
lcd.print(now.year(), DEC);
}
void setup() {
Serial.begin(9600);                      
if (! rtc.begin()) {                      
Serial.println(&quot;Couldn&#39;t find RTC&quot;);
while (1);
}
if (rtc.lostPower()) {
Serial.println(&quot;RTC lost power, lets set the time!&quot;);
}
rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));        
 // rtc.adjust(DateTime(2023, 9, 10, 24, 59, 30));              
lcd.begin(16, 2);
lcd.clear();
lcd.setCursor(0, 0);
lcd.print(&quot;Take care of&quot;);                                    
lcd.setCursor(0, 1);
lcd.print(&quot;Your health&quot;);
delay(1000);
pinMode(push1pin, INPUT);                                    
pinMode(push2pin, INPUT);
pinMode(push3pin, INPUT);
pinMode(stopPin, INPUT);
pinMode(ledPin, OUTPUT);
delay(200);
Serial.println(EEPROM.read(addr));


 val2 = EEPROM.read(addr);                        
switch (val2) {
case 1:
Serial.println(&quot;Set for 1/day&quot;);
 push1state = 1;
push2state = 0;
push3state = 0;
pushVal = 1;
break;
case 2:
 Serial.println(&quot;Set for 2/day&quot;);
push1state = 0;
push2state = 1;
push3state = 0;
pushVal = 2;
break;
case 3:
Serial.println(&quot;Set for 3/day&quot;);
push1state = 0;
push2state = 0;
push3state = 1;
pushVal = 3;
break;
}
}
void loop() {
push1();                                             //call to set once/day
push2();                                             //call to set twice/day
push3();                                             //call to set thrice/day
if (pushVal == 1) {                                // if push button 1 pressed then remind at
8am
at8am();                                           //function to start uzzing at 8am
}
else if (pushVal == 2) {                             // if push button 2 pressed then remind
at 8am and 8pm
at8am();                                            
at8pm();                                           //function to start uzzing at 8mm



}
else if (pushVal == 3) {                             // if push button 3 pressed then remind
at 8am and 8pm
at8am();
at2pm();                                            //function to start uzzing at 8mm
at8pm();
}
currentMillisLCD = millis();                        
push1state = digitalRead(push1pin);                  
push2state = digitalRead(push2pin);
push3state = digitalRead(push3pin);
stopinState = digitalRead(stopPin);
 stopPins();                                            
changeScreen();                                        
}
void push1() {                  
if (push1state == 1) {
push1state = 0;
push2state = 0;
push3state = 0;
EEPROM.write(addr, 1);
Serial.print(&quot;Push1 Written : &quot;); Serial.println(EEPROM.read(addr));
pushVal = 1;                                          
lcd.clear();
lcd.setCursor(0, 0);
lcd.print(&quot;Reminder set &quot;);
lcd.setCursor(0, 1);
lcd.print(&quot;for Once/day !&quot;);
delay(1200);
lcd.clear();}
}
void push2() {                    
if (push2state == 1) {
push2state = 0;
push1state = 0;
push3state = 0;
EEPROM.write(addr, 2);

 Serial.print(&quot;Push2 Written : &quot;); Serial.println(EEPROM.read(addr));
pushVal = 2;
lcd.clear();
lcd.setCursor(0, 0);
lcd.print(&quot;Reminder set &quot;);
lcd.setCursor(0, 1);
lcd.print(&quot;for Twice/day !&quot;);
delay(1200);
lcd.clear();
}}
void push3() {                    
if (push3state == 1) {
push3state = 0;
 push1state = 0;
push2state = 0;
    EEPROM.write(addr, 3);
Serial.print(&quot;Push3 Written : &quot;); Serial.println(EEPROM.read(addr));
pushVal = 3;
 lcd.clear();
lcd.setCursor(0, 0);
lcd.print(&quot;Reminder set &quot;);
lcd.setCursor(0, 1);
lcd.print(&quot;for Thrice/day !&quot;);
 delay(1200);
 lcd.clear();
}
}
void stopPins() {                  
if (stopinState == 1) {
pushpressed = 1;
lcd.clear();
lcd.setCursor(0, 0);
lcd.print(&quot;Take Medicine  &quot;);
 lcd.setCursor(0, 1);
lcd.print(&quot;with Warm Water&quot;);
delay(1200);
lcd.clear();



 }
}
void startBuzz() {                    
 if (pushpressed == 0) {
Serial.println(&quot;pushpressed is false in blink&quot;);
unsigned long currentMillis = millis();
if (currentMillis - previousMillis &gt;= interval) {
previousMillis = currentMillis;        
Serial.println(&quot;Start Buzzing&quot;);
if (ledState == LOW) {                  
  ledState = HIGH;
}  else {
 ledState = LOW;
}
digitalWrite(ledPin, ledState);
}
}
else if (pushpressed == 1) {
Serial.println(&quot;pushpressed is true&quot;);
ledState = LOW;
digitalWrite(ledPin, ledState);
}}
void at8am() {                    
DateTime now = rtc.now();
if (int(now.hour()) &gt;= buzz8amHH) {
if (int(now.minute()) &gt;= buzz8amMM) {
if (int(now.second()) &gt; buzz8amSS) {
        /////////////////////////////////////////////////////
        startBuzz();
        /////////////////////////////////////////////////////
      }}}}
void at2pm() {                      



DateTime now = rtc.now();
  if (int(now.hour()) &gt;= buzz2pmHH) {
if (int(now.minute()) &gt;= buzz2pmMM) {
if (int(now.second()) &gt; buzz2pmSS) {
        startBuzz();
      }}}}
void at8pm() {                          
DateTime now = rtc.now();
  if (int(now.hour()) &gt;= buzz8pmHH) {
    if (int(now.minute()) &gt;= buzz8pmMM) {
      if (int(now.second()) &gt; buzz8pmSS) {
         /////////////////////////////////////////////////////
        startBuzz();
        /////////////////////////////////////////////////////
}}}}
void changeScreen() {
if (currentMillisLCD - previousMillisLCD &gt; intervalLCD)            
{
previousMillisLCD = currentMillisLCD;
screens++;
if (screens &gt; maxScreen) {
screens = 0;
 }
isScreenChanged = true;
}
if (isScreenChanged)  
{
isScreenChanged = false;
  switch (screens)
{
 case getWellsoon:



 gwsMessege();        
    break;
   case HELP_SCREEN:              
  helpScreen();              
break;
 case TIME_SCREEN:
     timeScreen();                
    break;
    default:
break;
} }}
